##Implementation of the viterbi and training algorithm###

Viterbi implementation:
A file named HMM.txt is in the path. HMM.txt has HMM description i.e states say HL(Each state should be represented by a single character), list of observation,start_probability, transition_probability and emission_probability.

Usage: python "viterbi.py" -i HMM.txt for all the HMM model except lambda phage.
Usage for lambda phage: python "viterbi.py" -i HMM.txt -s lambda.fa
output : An output file will be generated named output.txt. It will have the best likely path. The associated log probabilities and score will be printed to the standard output.


Training Algorithm.

It takes the best likely path file generated by viterbi algorithm and the list of observation as input and generates the updated transition and emission probabilities.

Usage: python "training.py" -i output.txt -s lambda.fa
PS: The observation sequence is read as a string and then converted into list of observation sequences.

Output: Updated tranistion and emission probabilities are printed to the standard output. These new updated transition and emission probabilities are used to train the viterbi algorithm, until the score becomes constant.




#####List of files as per submission rubric#####
for lambda phage:
Initial HMM state: HMM.txt
Final HMM state: training_output.txt
Note: Observation sequence is lambda.fa

Best likely path : output_first_viterbi.txt. This is the output from viterbi algorithm
Best likley path after from updated tarnsition and emission probabilities : output_final.txt


Breakpoints:
Text file named "breakpoints_from_lambda.txt" records the coordinates.

PS: The input file should be exactly in the format given in HMM1.txt. While defining the various properties of HMM spacing between the characters should be taken care off. Else the script can throw unexpected error.In case of such unexpected error,input file should be looked.

